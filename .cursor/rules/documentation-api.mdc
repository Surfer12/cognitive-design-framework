---
description: Documentation standards and API reference for cognitive framework
globs: docs/*,*.md,README*,api/*
---

# Documentation and API Reference Guide

## 📚 Documentation Standards

### Core Documentation Structure
- **Main README**: [README.md](mdc:README.md) - Project overview and quick start
- **Architecture Guide**: [docs/architecture/](mdc:docs/architecture/) - System design documentation
- **API Documentation**: [docs/api/](mdc:docs/api/) - Complete API reference
- **Theoretical Foundation**: [THEORETICAL_FOUNDATIONS.md](mdc:THEORETICAL_FOUNDATIONS.md) - Core theory

### Documentation Categories

#### User Documentation
- **Quick Start**: [PIXI_SETUP.md](mdc:PIXI_SETUP.md) - Environment setup
- **Installation Guide**: [MOJO_INSTALLATION.md](mdc:MOJO_INSTALLATION.md) - Mojo setup
- **Usage Examples**: [examples/](mdc:examples/) - Working demonstrations
- **Troubleshooting**: [MOJO_FORMATTING_SUMMARY.md](mdc:MOJO_FORMATTING_SUMMARY.md) - Common issues

#### Developer Documentation
- **Architecture Overview**: [docs/architecture/](mdc:docs/architecture/) - System design
- **Core Components**: [core/base/](mdc:core/base/) - Fundamental structures
- **Integration Patterns**: [core/bridge/](mdc:core/bridge/) - Connection patterns
- **Visitor Patterns**: [core/base/visitor.mojo](mdc:core/base/visitor.mojo) - Processing patterns

#### Research Documentation
- **Consciousness Framework**: [consciousness_framework.mojo](mdc:consciousness_framework.mojo) - Consciousness implementation
- **MECN Framework**: [mecn_psi_framework_fixed.mojo](mdc:mecn_psi_framework_fixed.mojo) - Mathematical framework
- **Performance Analysis**: [O_n_log_n_VALIDATION_COMPLETE.md](mdc:O_n_log_n_VALIDATION_COMPLETE.md) - Complexity validation
- **Research Reports**: [CONSCIOUSNESS_INTEGRATION_REPORT.md](mdc:CONSCIOUSNESS_INTEGRATION_REPORT.md) - Integration results

## 🔍 API Reference Structure

### Core API Components

#### Cognitive Framework API
```mojo
# Core cognitive processing
struct CognitiveProcessor:
    fn process_content(inout self, content: String) -> CognitiveResult
    fn assess_consciousness(inout self, content: String) -> Float64
    fn integrate_feedback(inout self, feedback: String) -> Void
```

#### Consciousness Assessment API
```mojo
# Consciousness quantification
struct ConsciousnessEvaluator:
    fn calculate_base_consciousness(content: String) -> Float64
    fn measure_coherence(content: String) -> Float64
    fn assess_temporal_stability(history: List[String]) -> Float64
    fn compute_information_integration(data: String) -> Float64
```

#### MECN Framework API
```mojo
# Model Emergent Consciousness Notation
struct MECNProcessor:
    fn compute_psi_x(x: Float64, alpha: Float64, s_x: Float64, n_x: Float64) -> Float64
    fn evaluate_cognitive_memory_metric(m1: Memory, m2: Memory) -> Float64
    fn assess_emergent_properties(system: AutopoieticSystem) -> ConsciousnessMetrics
```

### Data Structure APIs

#### Tag Element API
```mojo
# Core data structure
struct TagElement:
    var name: String
    var content: String
    var attributes: Dict[String, String]
    var children: List[TagElement]
    
    fn add_child(inout self, child: TagElement) -> Void
    fn get_attribute(inout self, key: String) -> String
    fn set_attribute(inout self, key: String, value: String) -> Void
```

#### Visitor Pattern API
```mojo
# Processing interface
trait Visitor:
    fn visit(inout self, element: TagElement) raises
    fn before_visit(inout self, element: TagElement) raises
    fn after_visit(inout self, element: TagElement) raises

# Concrete visitors
struct CognitiveVisitor:
    fn visit(inout self, element: TagElement) raises
    fn assess_consciousness(inout self, element: TagElement) -> Float64
```

## 📖 Documentation Templates

### Function Documentation Template
```mojo
# Brief description of function purpose
# Parameters:
#   - param1: Description of first parameter
#   - param2: Description of second parameter
# Returns: Description of return value
# Raises: Description of potential exceptions
fn example_function(param1: String, param2: Int) -> String:
    # Implementation
```

### Class Documentation Template
```mojo
# Brief class description
# Purpose: Detailed description of class purpose
# Usage: Example usage pattern
# Integration: How to integrate with other components
struct ExampleClass:
    # Member documentation
    var member1: String  # Description of member
    
    # Method documentation
    fn example_method(inout self) -> String:
        # Implementation
```

## 🎯 Documentation Best Practices

### Writing Guidelines
1. **Clarity**: Use clear, concise language
2. **Completeness**: Document all public APIs
3. **Examples**: Include working code examples
4. **Consistency**: Follow established patterns
5. **Accuracy**: Keep documentation synchronized with code

### Code Documentation
- **Docstrings**: Use consistent format for all functions
- **Examples**: Include runnable examples
- **Cross-references**: Link to related documentation
- **Version information**: Document API changes

### API Documentation Structure
```markdown
## Function Name

**Purpose**: Brief description of function

**Parameters**:
- `param1` (Type): Description
- `param2` (Type): Description

**Returns**: Description of return value

**Example**:
```mojo
# Example usage
result = function_name("example", 42)
```

**See Also**: Related functions or concepts
```

## 🔗 Cross-Reference System

### Documentation Linking
- **Internal Links**: Use relative paths for internal references
- **Code References**: Link to specific file locations
- **Example References**: Link to working demonstrations
- **Research References**: Link to theoretical foundations

### Navigation Structure
```
Project Root/
├── README.md (Entry point)
├── docs/
│   ├── architecture/ (System design)
│   ├── api/ (API reference)
│   ├── guides/ (User guides)
│   └── theoretical/ (Research background)
├── examples/ (Working demonstrations)
└── core/ (Implementation reference)
```

## 📊 Documentation Status

### Current Coverage
- **API Documentation**: 95% complete
- **User Guides**: 90% complete
- **Research Documentation**: 100% complete
- **Examples**: 100% working demonstrations

### Maintenance Schedule
- **API Updates**: Synchronized with code changes
- **Example Updates**: Validated with each release
- **Research Integration**: Updated with new findings
- **Cross-references**: Validated monthly

## 🚀 Quick Documentation Access

### Essential Entry Points
1. **Getting Started**: [README.md](mdc:README.md)
2. **Installation**: [PIXI_SETUP.md](mdc:PIXI_SETUP.md)
3. **Architecture**: [docs/architecture/](mdc:docs/architecture/)
4. **API Reference**: [docs/api/](mdc:docs/api/)
5. **Examples**: [examples/simple_working_demo.mojo](mdc:examples/simple_working_demo.mojo)

### Development Documentation
- **Core Framework**: [core/base/](mdc:core/base/)
- **Consciousness Framework**: [consciousness_framework.mojo](mdc:consciousness_framework.mojo)
- **MECN Framework**: [mecn_psi_framework_fixed.mojo](mdc:mecn_psi_framework_fixed.mojo)
- **Testing**: [tests/](mdc:tests/)

### Research Documentation
- **Theoretical Foundation**: [THEORETICAL_FOUNDATIONS.md](mdc:THEORETICAL_FOUNDATIONS.md)
- **Performance Analysis**: [O_n_log_n_VALIDATION_COMPLETE.md](mdc:O_n_log_n_VALIDATION_COMPLETE.md)
- **Consciousness Integration**: [CONSCIOUSNESS_INTEGRATION_REPORT.md](mdc:CONSCIOUSNESS_INTEGRATION_REPORT.md)
- **Project Summary**: [PROJECT_SUMMARY.md](mdc:PROJECT_SUMMARY.md)