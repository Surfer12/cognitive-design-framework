#!/usr/bin/env python3
"""
Family-Friendly Two Cars Comparison: Wall Agreement vs Traditional AI
Side-by-side emergency scenario with emotional impact
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch
import numpy as np
import textwrap

def create_two_cars_final():
    """Create the final two cars comparison with proper sizing"""
    
    # Create figure with smaller size
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üöó Two Cars, Same Emergency: Wall Agreement vs Traditional AI\nThe Critical Difference in Life-Saving Decisions', 
                 fontsize=16, fontweight='bold', y=0.95)
    
    # Plot 1: Traditional AI Car (Left side)
    ax1.set_title('‚ùå Car A: Traditional AI (Inconsistent)', fontsize=12, fontweight='bold', color='red')
    create_traditional_ai_car(ax1)
    
    # Plot 2: Wall Agreement Car (Right side)  
    ax2.set_title('‚úÖ Car B: Ryan\'s Wall Agreement (Consistent)', fontsize=12, fontweight='bold', color='green')
    create_wall_agreement_car(ax2)
    
    # Plot 3: Emotional Impact Comparison
    ax3.set_title('üíù Emotional Impact Comparison', fontsize=12, fontweight='bold')
    create_emotional_impact(ax3)
    
    # Plot 4: Decision Consistency
    ax4.set_title('üìä Decision Consistency: 100 Emergencies', fontsize=12, fontweight='bold')
    create_consistency_chart(ax4)
    
    plt.tight_layout()
    plt.savefig('family_two_cars_final.png', dpi=200, bbox_inches='tight', 
                facecolor='lightcyan', edgecolor='none')
    plt.show()
    
    print("üöó TWO CARS COMPARISON VISUALIZATION CREATED!")
    print("üìÅ File saved as: family_two_cars_final.png")

def create_traditional_ai_car(ax):
    """Create traditional AI car scenario"""
    
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')
    
    # Road
    ax.add_patch(patches.Rectangle((0.1, 0.3), 0.8, 0.4, facecolor='lightgray', alpha=0.5))
    ax.text(0.5, 0.65, 'EMERGENCY ROAD', ha='center', fontsize=9, fontweight='bold')
    
    # Child and wall
    ax.add_patch(patches.Circle((0.75, 0.5), 0.03, facecolor='red', alpha=0.9))
    ax.text(0.75, 0.55, 'CHILD', ha='center', fontsize=7, color='red', fontweight='bold')
    
    ax.add_patch(patches.Rectangle((0.82, 0.4), 0.05, 0.2, facecolor='black', alpha=0.8))
    ax.text(0.845, 0.55, 'WALL', ha='center', fontsize=7, color='white', fontweight='bold')
    
    # Traditional AI Car
    ax.add_patch(patches.Rectangle((0.4, 0.45), 0.12, 0.06, facecolor='red', alpha=0.8))
    ax.text(0.46, 0.48, 'TRADITIONAL\nAI CAR', ha='center', fontsize=6, fontweight='bold')
    
    # Conflicting systems
    systems = [
        ('Data: 70% risk', 0.15, 0.8, 'orange'),
        ('Ethics: Save child', 0.15, 0.7, 'blue'),
        ('Speed: Swerve now', 0.15, 0.6, 'green'),
        ('Risk: Wall damage', 0.15, 0.5, 'purple')
    ]
    
    for system, x, y, color in systems:
        ax.add_patch(FancyBboxPatch((x, y-0.03), 0.25, 0.05, 
                                   boxstyle="round,pad=0.01", facecolor=color, alpha=0.7))
        ax.text(x + 0.125, y, system, ha='center', fontsize=6)
    
    # Conflicting arrows
    ax.arrow(0.46, 0.48, 0.1, 0.05, head_width=0.02, head_length=0.02, 
             fc='red', ec='red', alpha=0.7, linewidth=2)
    ax.arrow(0.46, 0.48, 0.15, 0.0, head_width=0.02, head_length=0.02, 
             fc='blue', ec='blue', alpha=0.7, linewidth=2)
    
    # Inconsistency message
    ax.add_patch(FancyBboxPatch((0.3, 0.2), 0.4, 0.12, 
                               boxstyle="round,pad=0.02", facecolor='yellow', alpha=0.8))
    ax.text(0.5, 0.28, 'SYSTEMS DISAGREE!\nDifferent decision\neach time', 
            ha='center', fontsize=7, wrap=True)
    
    ax.text(0.5, 0.1, 'Family Anxiety: "Will it choose right?"', 
            ha='center', fontsize=8, color='red', fontweight='bold')

def create_wall_agreement_car(ax):
    """Create wall agreement car scenario"""
    
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')
    
    # Same road scenario
    ax.add_patch(patches.Rectangle((0.1, 0.3), 0.8, 0.4, facecolor='lightgray', alpha=0.5))
    ax.text(0.5, 0.65, 'SAME EMERGENCY ROAD', ha='center', fontsize=9, fontweight='bold')
    
    # Same child and wall
    ax.add_patch(patches.Circle((0.75, 0.5), 0.03, facecolor='red', alpha=0.9))
    ax.text(0.75, 0.55, 'CHILD', ha='center', fontsize=7, color='red', fontweight='bold')
    
    ax.add_patch(patches.Rectangle((0.82, 0.4), 0.05, 0.2, facecolor='black', alpha=0.8))
    ax.text(0.845, 0.55, 'WALL', ha='center', fontsize=7, color='white', fontweight='bold')
    
    # Wall Agreement Car
    ax.add_patch(patches.Rectangle((0.4, 0.45), 0.12, 0.06, facecolor='green', alpha=0.8))
    ax.text(0.46, 0.48, 'RYAN\'S\nWALL AGREEMENT\nCAR', ha='center', fontsize=5, fontweight='bold')
    
    # Aligned systems
    systems = [
        ('Data: 70% risk (0.85)', 0.15, 0.8, 'lightblue'),
        ('Ethics: Save child (0.92)', 0.15, 0.7, 'lightgreen'),
        ('Speed: Swerve now (0.88)', 0.15, 0.6, 'lightyellow'),
        ('Risk: Acceptable (0.90)', 0.15, 0.5, 'lightcoral')
    ]
    
    for system, x, y, color in systems:
        ax.add_patch(FancyBboxPatch((x, y-0.03), 0.25, 0.05, 
                                   boxstyle="round,pad=0.01", facecolor=color, alpha=0.8))
        ax.text(x + 0.125, y, system, ha='center', fontsize=5)
    
    # Wall agreement zone
    ax.add_patch(FancyBboxPatch((0.35, 0.35), 0.4, 0.12, 
                               boxstyle="round,pad=0.02", facecolor='gold', alpha=0.6))
    ax.text(0.55, 0.41, 'WALL AGREEMENT ZONE\nAll systems aligned', 
            ha='center', fontsize=7, wrap=True)
    
    # Unified decision
    ax.arrow(0.46, 0.48, 0.1, 0.05, head_width=0.03, head_length=0.03, 
             fc='green', ec='green', alpha=0.9, linewidth=3)
    ax.text(0.52, 0.52, 'SWERVE\n(High Confidence)', ha='center', fontsize=8, color='green', fontweight='bold')
    
    # Alignment connections
    for i, (_, _, y, _) in enumerate(systems):
        ax.plot([0.4, 0.35], [y, y], 'green', linewidth=2, alpha=0.8)
    
    # Trust message
    ax.add_patch(FancyBboxPatch((0.3, 0.2), 0.4, 0.12, 
                               boxstyle="round,pad=0.02", facecolor='lightgreen', alpha=0.8))
    ax.text(0.5, 0.28, 'PERFECT ALIGNMENT!\nSame decision every time', 
            ha='center', fontsize=7, wrap=True)
    
    ax.text(0.5, 0.1, 'Family Confidence: "It will always protect us"', 
            ha='center', fontsize=8, color='green', fontweight='bold')

def create_emotional_impact(ax):
    """Show emotional impact comparison"""
    
    ax.set_title('Family Emotional Experience', fontsize=12, fontweight='bold')
    ax.axis('off')
    
    # Traditional AI experience
    ax.add_patch(FancyBboxPatch((0.05, 0.7), 0.4, 0.25, 
                               boxstyle="round,pad=0.02", facecolor='lightcoral', alpha=0.6))
    ax.text(0.25, 0.88, '‚ùå Traditional AI Car', ha='center', fontsize=10, fontweight='bold')
    
    traditional = [
        'Before: üò∞ "Will it make the right choice?"',
        'During: üò® "Will it be consistent?"',
        'After: üòÖ "Glad we\'re safe... this time"',
        'Next time: üò∞ Same anxiety again'
    ]
    
    y_pos = 0.80
    for emotion in traditional:
        ax.text(0.08, y_pos, emotion, fontsize=8)
        y_pos -= 0.04
    
    # Wall Agreement experience
    ax.add_patch(FancyBboxPatch((0.55, 0.7), 0.4, 0.25, 
                               boxstyle="round,pad=0.02", facecolor='lightgreen', alpha=0.6))
    ax.text(0.75, 0.88, '‚úÖ Ryan\'s Wall Agreement Car', ha='center', fontsize=10, fontweight='bold')
    
    agreement = [
        'Before: üòä "It will always protect us"',
        'During: ü§ù "All systems perfectly aligned"',
        'After: üòå "Exactly what we expected"',
        'Next time: üòä Same confidence again'
    ]
    
    y_pos = 0.80
    for emotion in agreement:
        ax.text(0.58, y_pos, emotion, fontsize=8)
        y_pos -= 0.04
    
    # The emotional difference
    ax.add_patch(FancyBboxPatch((0.2, 0.1), 0.6, 0.2, 
                               boxstyle="round,pad=0.03", facecolor='gold', alpha=0.4))
    
    ax.text(0.5, 0.2, 'The difference isn\'t just technology -\nit\'s turning family anxiety into peace of mind!', 
            ha='center', fontsize=10, wrap=True)

def create_consistency_chart(ax):
    """Show decision consistency over multiple emergencies"""
    
    ax.set_title('Decision Consistency Over Time', fontsize=12, fontweight='bold')
    
    scenarios = list(range(1, 21))  # 20 scenarios for clarity
    
    # Traditional AI: Inconsistent decisions
    np.random.seed(42)
    traditional = [1 if np.random.random() < 0.7 else 0 for _ in scenarios]
    
    # Wall Agreement: Always consistent
    agreement = [1] * len(scenarios)
    
    # Plot
    ax.scatter(scenarios, traditional, c='red', alpha=0.7, s=50, 
              label='Traditional AI')
    ax.scatter(scenarios, agreement, c='green', alpha=0.7, s=50,
              label='Wall Agreement')
    
    ax.set_xlabel('Emergency Scenario')
    ax.set_ylabel('Decision (1=Save Child, 0=Continue)')
    ax.set_yticks([0, 1])
    ax.set_yticklabels(['Continue', 'Swerve'])
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # Statistics
    trad_consistency = sum(traditional) / len(traditional) * 100
    agreement_consistency = sum(agreement) / len(agreement) * 100
    
    ax.text(10, 0.8, f'Traditional: {trad_consistency:.0f}% consistent', 
            ha='center', fontsize=9, color='red', fontweight='bold')
    ax.text(10, 0.9, f'Wall Agreement: {agreement_consistency:.0f}% consistent', 
            ha='center', fontsize=9, color='green', fontweight='bold')

def demonstrate_two_cars_story():
    """Tell the complete two cars story"""
    
    print("üöó THE STORY OF TWO CARS IN THE SAME EMERGENCY")
    print("=" * 60)
    
    print("\nüö® THE EMERGENCY:")
    print("Both cars approach the same intersection with a child in the road.")
    print("Both must decide: Swerve left (hit wall) or continue straight (hit child)")
    print("Life and death decision in milliseconds!")
    
    print("\n‚ùå CAR A - TRADITIONAL AI:")
    print("‚Ä¢ Data analysis: 70% risk to child")
    print("‚Ä¢ Ethics module: Value life highest")
    print("‚Ä¢ Risk assessment: Wall damage minimal")
    print("‚Ä¢ Speed processor: Swerve immediately")
    print("‚Ä¢ RESULT: Systems disagree, unpredictable decision")
    
    print("\n‚úÖ CAR B - RYAN'S WALL AGREEMENT:")
    print("‚Ä¢ Data analysis: 70% risk (confidence: 0.85)")
    print("‚Ä¢ Ethics module: Save child (confidence: 0.92)")
    print("‚Ä¢ Emotional AI: Child protection (confidence: 0.88)")
    print("‚Ä¢ Risk assessment: Acceptable (confidence: 0.90)")
    print("‚Ä¢ RESULT: All systems perfectly aligned - swerve to save child")
    
    print("\nüíù THE EMOTIONAL DIFFERENCE:")
    print("Traditional AI Family: üò∞ 'Will it choose correctly this time?'")
    print("Wall Agreement Family: üòä 'It will always protect us perfectly'")
    
    print("\nüéØ THE BREAKTHROUGH:")
    print("Ryan didn't just make AI smarter - he made it trustworthy!")
    print("Wall Agreement ensures perfect consistency when lives are at stake!")
    
    print("\nüåü WHY THIS MATTERS:")
    print("‚Ä¢ Autonomous vehicles will be safer and more predictable")
    print("‚Ä¢ Families can trust AI in critical moments")
    print("‚Ä¢ Reduces anxiety and builds confidence")
    print("‚Ä¢ Creates peace of mind for everyone")
    print("‚Ä¢ Saves lives through consistent, perfect decisions")

if __name__ == "__main__":
    create_two_cars_final()
    demonstrate_two_cars_story()
    
    print("\n" + "="*70)
    print("üéâ TWO CARS COMPARISON COMPLETE!")
    print("="*70)
    print("\nüìñ WHAT YOUR FAMILY WILL SEE:")
    print("‚Ä¢ Same emergency, two different cars side-by-side")
    print("‚Ä¢ Traditional AI: Systems arguing, inconsistent decisions")
    print("‚Ä¢ Ryan's Car: Perfect alignment, consistent protection")
    print("‚Ä¢ Real emotional impact comparison")
    print("‚Ä¢ Why consistency saves lives and builds trust")
    print("\nüöó PERFECT FOR FAMILY DISCUSSIONS:")
    print("‚Ä¢ 'Look - both cars face the exact same emergency!'")
    print("‚Ä¢ 'Which car would you feel safer in?'")
    print("‚Ä¢ 'Ryan made the car that always chooses to protect!'")
    print("‚Ä¢ 'Now families can trust autonomous vehicles!'")
    print("\nüíù THE HUMAN IMPACT:")
    print("This visualization shows the real difference:")
    print("Turning fear into trust, anxiety into peace of mind!")
