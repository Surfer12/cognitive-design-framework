#!/usr/bin/env python3
"""
Phase-Space Trajectory Visualization for MECN Framework
Ryan David Oates' Dynamical Systems Analysis

This script generates the 3D phase-space trajectory plot showing the evolution
of Œ±(t), Œª‚ÇÅ, and Œª‚ÇÇ parameters in the core equation:
Œ®(x) = ‚à´[Œ±(t)S(x) + (1-Œ±(t))N(x) + w_cross[S(m‚ÇÅ)N(m‚ÇÇ) - S(m‚ÇÇ)N(m‚ÇÅ)]] 
       √ó exp(-[Œª‚ÇÅR_cognitive + Œª‚ÇÇR_efficiency]) √ó P(H|E,Œ≤) dt
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.patches as mpatches
from matplotlib import cm

def generate_phase_space_trajectory():
    """
    Generate the phase-space trajectory data matching the analysis.
    
    Returns:
        tuple: (t_values, alpha_values, lambda1_values, lambda2_values)
    """
    # Time parameter t from 0 to 1
    t_values = np.linspace(0, 1, 100)
    
    # Œ±(t): Time-varying weight balancing symbolic and neural outputs
    # Linear decrease from 2.0 to 0.5 as described in analysis
    alpha_values = 2.0 - 1.5 * t_values
    
    # Œª‚ÇÅ: Cognitive plausibility weight (vertical axis)
    # Decreases from 2.0 to 0.5 as Œ±(t) increases
    lambda1_values = 2.0 - 1.5 * t_values
    
    # Œª‚ÇÇ: Computational efficiency weight (horizontal axis)  
    # Decreases from 2.0 to 0.5 as Œ±(t) increases
    lambda2_values = 2.0 - 1.5 * t_values
    
    return t_values, alpha_values, lambda1_values, lambda2_values

def create_phase_space_plot():
    """
    Create the 3D phase-space trajectory plot matching the analysis.
    """
    # Generate trajectory data
    t_vals, alpha_vals, lambda1_vals, lambda2_vals = generate_phase_space_trajectory()
    
    # Create 3D plot
    fig = plt.figure(figsize=(12, 10))
    ax = fig.add_subplot(111, projection='3d')
    
    # Plot the trajectory
    ax.plot(alpha_vals, lambda1_vals, lambda2_vals, 
            linewidth=4, color='blue', alpha=0.8, label='Phase-Space Trajectory')
    
    # Mark start and end points
    ax.scatter([alpha_vals[0]], [lambda1_vals[0]], [lambda2_vals[0]], 
               color='red', s=100, label='Start (t=0)')
    ax.scatter([alpha_vals[-1]], [lambda1_vals[-1]], [lambda2_vals[-1]], 
               color='green', s=100, label='End (t=1)')
    
    # Set axis labels and ranges
    ax.set_xlabel('Œ±(t)', fontsize=12, fontweight='bold')
    ax.set_ylabel('Œª‚ÇÅ(t)', fontsize=12, fontweight='bold') 
    ax.set_zlabel('Œª‚ÇÇ(t)', fontsize=12, fontweight='bold')
    
    # Set axis ranges to match the analysis
    ax.set_xlim(0, 2)
    ax.set_ylim(0, 2)
    ax.set_zlim(0, 2)
    
    # Add grid
    ax.grid(True, alpha=0.3)
    
    # Set title
    ax.set_title('Phase-Space Trajectory: Œ±(t), Œª‚ÇÅ(t), Œª‚ÇÇ(t)\nMECN Framework Dynamic Optimization', 
                 fontsize=14, fontweight='bold', pad=20)
    
    # Add legend
    ax.legend(loc='upper right')
    
    # Set viewing angle to match the analysis description
    ax.view_init(elev=20, azim=45)
    
    return fig, ax

def add_analysis_annotations(ax, alpha_vals, lambda1_vals, lambda2_vals):
    """
    Add annotations explaining key points on the trajectory.
    """
    # Add text annotations for key points
    mid_idx = len(alpha_vals) // 2
    
    # Midpoint annotation (t ‚âà 0.5)
    ax.text(alpha_vals[mid_idx], lambda1_vals[mid_idx], lambda2_vals[mid_idx] + 0.1,
            'Balanced State\n(Œ±‚âà1.0, Œª‚ÇÅ‚âà1.5, Œª‚ÇÇ‚âà0.5)', 
            fontsize=10, ha='center', va='bottom',
            bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))
    
    # Start point annotation
    ax.text(alpha_vals[0] + 0.1, lambda1_vals[0], lambda2_vals[0],
            'Initial State\n(Œ±‚âà2.0, Œª‚ÇÅ‚âà2.0, Œª‚ÇÇ‚âà2.0)', 
            fontsize=10, ha='left', va='center',
            bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
    
    # End point annotation  
    ax.text(alpha_vals[-1] - 0.1, lambda1_vals[-1], lambda2_vals[-1],
            'Final State\n(Œ±‚âà0.5, Œª‚ÇÅ‚âà0.5, Œª‚ÇÇ‚âà0.5)', 
            fontsize=10, ha='right', va='center',
            bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen", alpha=0.7))

def create_equation_display():
    """
    Create a text display showing the core equation.
    """
    equation_text = r"""
Core MECN Equation:
$\Psi(x) = \int \left[ \alpha(t) S(x) + (1-\alpha(t)) N(x) + w_{\text{cross}} [S(m_1)N(m_2) - S(m_2)N(m_1)] \right] \times \exp\left(-[\lambda_1 R_{\text{cognitive}} + \lambda_2 R_{\text{efficiency}}]\right) \times P(H|E,\beta) \, dt$

Where:
‚Ä¢ $\alpha(t)$: Dynamic weighting factor (0-2 range)
‚Ä¢ $\lambda_1$: Cognitive plausibility weight  
‚Ä¢ $\lambda_2$: Computational efficiency weight
‚Ä¢ $S(x)$: Symbolic reasoning output
‚Ä¢ $N(x)$: Neural processing output
‚Ä¢ $R_{\text{cognitive}}$: Cognitive penalty
‚Ä¢ $R_{\text{efficiency}}$: Efficiency penalty
‚Ä¢ $P(H|E,\beta)$: Bias-adjusted probability
"""
    return equation_text

def main():
    """
    Main function to generate and display the phase-space visualization.
    """
    print("üî¨ Generating Phase-Space Trajectory Visualization")
    print("=" * 60)
    
    # Create the main plot
    fig, ax = create_phase_space_plot()
    
    # Get trajectory data for annotations
    t_vals, alpha_vals, lambda1_vals, lambda2_vals = generate_phase_space_trajectory()
    
    # Add analysis annotations
    add_analysis_annotations(ax, alpha_vals, lambda1_vals, lambda2_vals)
    
    # Display equation
    equation_text = create_equation_display()
    print("\nüìê Core Equation:")
    print(equation_text)
    
    # Print trajectory analysis
    print("\nüìä Trajectory Analysis:")
    print(f"‚Ä¢ Start Point: Œ±(t)={alpha_vals[0]:.1f}, Œª‚ÇÅ={lambda1_vals[0]:.1f}, Œª‚ÇÇ={lambda2_vals[0]:.1f}")
    print(f"‚Ä¢ Mid Point:  Œ±(t)={alpha_vals[len(alpha_vals)//2]:.1f}, Œª‚ÇÅ={lambda1_vals[len(alpha_vals)//2]:.1f}, Œª‚ÇÇ={lambda2_vals[len(alpha_vals)//2]:.1f}")
    print(f"‚Ä¢ End Point:  Œ±(t)={alpha_vals[-1]:.1f}, Œª‚ÇÅ={lambda1_vals[-1]:.1f}, Œª‚ÇÇ={lambda2_vals[-1]:.1f}")
    
    print("\nüéØ Interpretation:")
    print("‚Ä¢ The trajectory shows simultaneous decrease in Œª‚ÇÅ and Œª‚ÇÇ as Œ±(t) increases")
    print("‚Ä¢ This represents dynamic adaptation between symbolic and neural processing")
    print("‚Ä¢ The regularization weights adjust to maintain cognitive plausibility and efficiency")
    print("‚Ä¢ Aligns with Oates' PINNs and DMD methodologies for chaotic systems")
    
    # Save the plot
    plt.tight_layout()
    plt.savefig('phase_space_trajectory.png', dpi=300, bbox_inches='tight')
    print("\nüíæ Plot saved as 'phase_space_trajectory.png'")
    
    # Show the plot
    plt.show()

if __name__ == "__main__":
    main()